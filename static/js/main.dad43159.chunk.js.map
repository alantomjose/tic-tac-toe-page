{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","initState","squares","Array","fill","isNext","state","i","slice","calculateWinner","setState","lines","length","a","b","c","flag","handleClick","status","winner","full","isFull","renderSquare","playAgain","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAaiBA,E,uKATH,IAAD,OACP,OACE,4BAAQC,UAAU,SAASC,QAAS,WAAK,EAAKC,MAAMD,YACjDE,KAAKD,MAAME,W,GALDC,IAAMC,WCiGVC,E,kDA1Fb,WAAYL,GAAO,IAAD,8BACd,cAAMA,IANVM,UAAU,CACNC,QAAQC,MAAM,GAAGC,KAAK,MACtBC,QAAO,GAKP,EAAKC,MAAM,EAAKL,UAFF,E,wDAKNM,GACR,IAAML,EAAUN,KAAKU,MAAMJ,QAAQM,QAChCZ,KAAKa,gBAAgBP,IAAWA,EAAQK,KAG3CL,EAAQK,GAAGX,KAAKU,MAAMD,OAAQ,IAAK,IACnCT,KAAKc,SAAS,CAACR,QAASA,EACxBG,QAAQT,KAAKU,MAAMD,Y,sCAINH,GAWb,IAVA,IAAMS,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAJ,EAAI,EAAGA,EAAII,EAAMC,OAAQL,IAAK,CAAC,IAAD,cACnBI,EAAMJ,GADa,GAC9BM,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIb,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,IAAMZ,EAAQW,KAAOX,EAAQa,GACpE,OAAOb,EAAQW,GAGnB,OAAO,O,6BAGFX,GAEH,IADA,IAAIc,GAAK,EACDT,EAAE,EAAEA,EAAE,EAAEA,IAAqB,OAAbL,EAAQK,KAAWS,GAAK,GAEhD,OAAOA,I,kCAIPpB,KAAKc,SAASd,KAAKK,a,mCAGZM,GAAI,IAAD,OACd,OAAO,kBAAC,EAAD,CAAQV,MAAOD,KAAKU,MAAMJ,QAAQK,GAAKb,QAAS,WAAK,EAAKuB,YAAYV,Q,+BAGrE,IAGFW,EAHC,OACDC,EAAQvB,KAAKa,gBAAgBb,KAAKU,MAAMJ,SACxCkB,EAAOxB,KAAKyB,OAAOzB,KAAKU,MAAMJ,SAYpC,OATMgB,EADDC,EACSA,EAAO,QACVC,EACE,eAGE,iBAAiBxB,KAAKU,MAAMD,OAAQ,IAAK,KAKtD,yBAAKZ,UAAU,SACb,yBAAKA,UAAU,UAAUyB,GACzB,yBAAKzB,UAAU,aACZG,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,IAErB,yBAAK7B,UAAU,aACZG,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,IAErB,yBAAK7B,UAAU,aACZG,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,GAClB1B,KAAK0B,aAAa,IAGrB,4BAAQ7B,UAAU,aAAaC,QAAS,WAAK,EAAK6B,cAAlD,mB,GA1FUzB,IAAMC,WCiBTyB,E,uKAfX,OACE,yBAAK/B,UAAU,QACf,2CACE,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,8BACA,mC,GAVOK,IAAMC,WCSV0B,MARf,WACE,OACC,6BACE,kBAAC,EAAD,QCKeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dad43159.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Square extends React.Component {\n    \n    render() {\n      return (\n        <button className=\"square\" onClick={()=>{this.props.onClick()}}>\n          {this.props.value}\n        </button>\n      );\n    }\n  }\n\n  export default Square;","import React, {Component} from 'react';\nimport Square from './Square'\n\nclass Board extends React.Component {\n    initState={\n        squares:Array(9).fill(null),\n        isNext:true\n       \n    }\n    constructor(props){\n        super(props);\n        this.state=this.initState\n    }\n    \n    handleClick(i){\n        const squares = this.state.squares.slice();    \n        if(this.calculateWinner(squares)|| squares[i])return;\n        // this.isFull(squares);\n\n        squares[i]=this.state.isNext? 'X' :'O';\n        this.setState({squares: squares,\n        isNext:!this.state.isNext\n        });\n    }\n\n     calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }\n\n      isFull(squares){\n          let flag=true;\n          for(let i=0;i<9;i++) if(squares[i]===null) flag=false;\n        //   if(flag)co\n          return flag;\n      }\n    \n     playAgain(){\n          this.setState(this.initState);\n      }\n\n    renderSquare(i) {\n      return <Square value={this.state.squares[i]}  onClick={()=>{this.handleClick(i)}} />;\n    }\n  \n    render() {\n        let winner= this.calculateWinner(this.state.squares);\n        let full = this.isFull(this.state.squares);\n        let status\n        if(winner){\n            status= winner+\"Won!!\";\n        }else if(full){\n            status='ITS A TIE!!!';\n        }\n        else{\n            status = 'Next player: '+(this.state.isNext? 'X' :'O');\n            \n        }\n  \n      return (\n        <div className=\"board\">\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n\n          <button className=\"play-again\" onClick={()=>{this.playAgain()}}>Play Again</button>\n        </div>\n      );\n    }\n  }\n\n  export default Board;","import React, {Component} from 'react';\nimport Board from './Board'\n\nclass Game extends React.Component {\n    render() {\n      return (\n        <div className=\"game\">\n        <h1>Tic-Tac-Toe</h1>\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Components/Game';\n\nfunction App() {\n  return (\n   <div>\n     <Game/>\n   </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}